/***************************************************************************
 *   Copyright (C) 2013 by Marco Beccuti                                   *
 *   beccuti@di.unito.it                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/


Different versions of HashChecker

HashChecker is the standard version. 
HashCheckerDebugOutput is the debug output version.
HashCheckerFreq computes and returns k-mer frequencies (leukaemia).
HashCheckerSimilarRead improves the standard version in the output: the reads for which all k-mers are in the hash table are reported in output (.sim). 
HashCheckerSignature computes and returns the signatures of reads (leukaemia). For each reads it computes the signatures as the largest sequence of consecutive k-mers found in the Hash Table
HashChekcerPairedEnd takes as input paired-end reads (e.g. <file>.R1.<num>.<ext>,  <file>.R2.<num>.<ext>) and returns the paired-end in which at least one mate has a k-mer not presented in the Hash Table
HashChekcerPairedEndSimilar takes as input paired-end reads (e.g. <file>.R1.<num>.<ext>,  <file>.R2.<num>.<ext>) and it  improves the standard version in the output: the reads for which all k-mer of all mathes are in the hash table are reported in output (.sim). 


Other tools

FreqChecker takes in input a set of read with their position in terms of chromosome and relative position. It returns a vector showing the reads distribution (and related peaks).
Parser divides the reads in the input files in two files so that reads in the same pair-end are separated. It checks the read name to discovered error in the pair-end. I.E. pair-end with more than 2 reads.

CreateKmer creates k-mers for a set of reads. It is able to manage pair-end reads.
CompCheckerKmer compares k-mers among different sets of experiments and returns those are different frequencies (leukaemia)
CompCheckerRead compares Reads   among different sets of experiments  and returns a CVS files with a frequency table. It copes with THEDIT(const.h) mismatches  (leukaemia). It performes aligment with germlines.
CompCheckerReadNoGerm compares Reads  among different sets of experiments  and returns a CVS files with a frequency table. It copes with THEDIT(const.h) mismatches.

FindRead  takes in input two files. The first contains a list of read names, while the second a set of reads in fasq format. It stores in the output file the reads with a name contained in the first 
file.
Alignment computes similarity between  input strings using Smith and Waterman or LevenshteinDistance.
AlignmentBlast computes similarity between input strings using Smith and Waterman or LevenshteinDistance. It visualized the alignment in Blast format.
AlignmentIGH  computes similarity between input string and IGH references
FASTA2FASTQ.pl converts a file with FASTA format into a new file with FASTQ format (use:  perl FASTA2FASTQ.pl file.fa > file.fastq)
UpdateFreq takes as input  kmer-frequency file (i.e. those generated by HashCheckerFreq)  and it updates its frequency values.